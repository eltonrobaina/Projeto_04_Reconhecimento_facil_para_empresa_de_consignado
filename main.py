# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from turtle import left, right
from PyQt5 import QtCore, QtGui, QtWidgets

from tkinter import Tk
from tkinter.filedialog import askopenfilename
import cv2

### Face_recognition ###
# First 'pip install cmake'
# second 'pip install face_recognition'

import face_recognition






class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(692, 571)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lb_imagemTreino = QtWidgets.QLabel(self.centralwidget)
        self.lb_imagemTreino.setGeometry(QtCore.QRect(20, 151, 284, 280))
        self.lb_imagemTreino.setStyleSheet("image: url(:/semimagem/Imagens/semImagem.png);")
        self.lb_imagemTreino.setText("")
        self.lb_imagemTreino.setObjectName("lb_imagemTreino")
        self.lb_imagemTeste = QtWidgets.QLabel(self.centralwidget)
        self.lb_imagemTeste.setGeometry(QtCore.QRect(380, 151, 284, 280))
        self.lb_imagemTeste.setStyleSheet("image: url(:/semimagem/Imagens/semImagem.png);")
        self.lb_imagemTeste.setText("")
        self.lb_imagemTeste.setObjectName("lb_imagemTeste")
        self.lb_titulo = QtWidgets.QLabel(self.centralwidget)
        self.lb_titulo.setGeometry(QtCore.QRect(90, 20, 535, 41))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.lb_titulo.setFont(font)
        self.lb_titulo.setObjectName("lb_titulo")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(30, 80, 625, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(330, 161, 20, 261))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.bt_imagemTreino = QtWidgets.QPushButton(self.centralwidget)
        self.bt_imagemTreino.setGeometry(QtCore.QRect(30, 110, 89, 25))
        self.bt_imagemTreino.setObjectName("bt_imagemTreino")
        self.lb_tituloTreino = QtWidgets.QLabel(self.centralwidget)
        self.lb_tituloTreino.setGeometry(QtCore.QRect(140, 110, 131, 21))
        self.lb_tituloTreino.setObjectName("lb_tituloTreino")
        self.bt_imagemTeste = QtWidgets.QPushButton(self.centralwidget)
        self.bt_imagemTeste.setGeometry(QtCore.QRect(400, 110, 89, 25))
        self.bt_imagemTeste.setObjectName("bt_imagemTeste")
        self.lb_titulo_Teste = QtWidgets.QLabel(self.centralwidget)
        self.lb_titulo_Teste.setGeometry(QtCore.QRect(510, 110, 131, 21))
        self.lb_titulo_Teste.setObjectName("lb_titulo_Teste")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(30, 440, 625, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.bt_predizer = QtWidgets.QPushButton(self.centralwidget)
        self.bt_predizer.setGeometry(QtCore.QRect(550, 470, 89, 25))
        self.bt_predizer.setObjectName("bt_predizer")
        self.txt_predicao = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_predicao.setEnabled(False)
        self.txt_predicao.setGeometry(QtCore.QRect(180, 470, 351, 25))
        self.txt_predicao.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.txt_predicao.setObjectName("txt_predicao")
        self.lb_resultadoPredicao = QtWidgets.QLabel(self.centralwidget)
        self.lb_resultadoPredicao.setGeometry(QtCore.QRect(30, 470, 151, 21))
        self.lb_resultadoPredicao.setObjectName("lb_resultadoPredicao")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 692, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lb_imagemTreino.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.lb_imagemTeste.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.lb_titulo.setText(_translate("MainWindow", "Sistema de reconhecimento facial"))
        self.bt_imagemTreino.setText(_translate("MainWindow", "Carregar"))
        self.lb_tituloTreino.setText(_translate("MainWindow", "Imagem Treino"))
        self.bt_imagemTeste.setText(_translate("MainWindow", "Carregar"))
        self.lb_titulo_Teste.setText(_translate("MainWindow", "Imagem Teste"))
        self.bt_predizer.setText(_translate("MainWindow", "Predizer"))
        self.lb_resultadoPredicao.setText(_translate("MainWindow", "Resultado Predição:"))



        ### Botoes Sistema ###
        self.bt_imagemTreino.clicked.connect(self.imagemTreino)
        self.bt_imagemTeste.clicked.connect(self.imagemTeste)
        self.bt_predizer.clicked.connect(self.predizer)


    ### Funcoes do sistema ###

    ## Carrega imagem Treino##
    def imagemTreino(self):
        Tk().withdraw()
        path = askopenfilename()
        print('path: ', path)
        arquivo = path.split('Imagens/')
        print('arquivo: ', arquivo)
        listaTreino = arquivo[1].split('.')
        print('listaTreino: ', listaTreino)
        global imgTreino
        imgTreino = listaTreino[0]
        urlTreino = 'image: url(:/' + imgTreino + '/Imagens/' + imgTreino + '.png)'
        print('urlTreino: ', urlTreino)
        self.lb_imagemTreino.setStyleSheet(urlTreino)
        imgTreino = face_recognition.load_image_file(path)

    ## Carrega imagem Teste##
    def imagemTeste(self):
        Tk().withdraw()
        path = askopenfilename()
        print('path: ', path)
        arquivo = path.split('Imagens/')
        print('arquivo: ', arquivo)
        listaTeste = arquivo[1].split('.')
        print('listaTeste: ', listaTeste)
        global imgTeste
        imgTeste = listaTeste[0]
        urlTeste = 'image: url(:/' + imgTeste + '/Imagens/' + imgTeste + '.png)'
        print('urlTeste: ', urlTeste)
        self.lb_imagemTeste.setStyleSheet(urlTeste)
        imgTeste = face_recognition.load_image_file(path)
    
    ## Predicao de Imagens ##
    def predizer(self):
        # Cortar imagem #
        treino_rgb = cv2.cvtColor(imgTreino, cv2.COLOR_BGR2RGB)
        teste_rgb = cv2.cvtColor(imgTeste, cv2.COLOR_BGR2RGB)
        locations_treino = face_recognition.face_locations(treino_rgb)
        locations_teste = face_recognition.face_locations(teste_rgb)

        for top, right, bottom, left in locations_treino:
            crop_treino = treino_rgb[top:bottom, left:right]
            cv2.imwrite('crop_treino.png', crop_treino)

        for top, right, bottom, left in locations_teste:
            crop_teste = teste_rgb[top:bottom, left:right]
            cv2.imwrite('crop_treino.png', crop_teste)

        cv2.imshow('crop_treino', crop_treino)
        cv2.imshow('crop_teste', crop_teste)

        # Carrega imagens para predicao #
        my_face_encoding = face_recognition.face_encodings(imgTreino)[0]
        unknow_face_encoding = face_recognition.face_encodings(imgTeste)[0]

        # Predicao #
        results = face_recognition.compare_faces([my_face_encoding],unknow_face_encoding)

        # Resultados #
        if results[0] ==True:
            resultado = 'As imagens sao da mesma pessoa'
            self.txt_predicao.setText(resultado)
        else:
            resultado = 'As imagens nao sao da mesma pessoa'
            self.txt_predicao.setText(resultado)

### Imagens Sistema ###
import anthony
import lebron1
import lebron2
import semimagem


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
